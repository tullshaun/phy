Basic JavaScript Fundamentals
Variable Types

javascript
Copy
Edit
let a = 10;
const b = 20;
var c = 30;
console.log(a, b, c);
Data Types

javascript
Copy
Edit
console.log(typeof "Hello"); // string
console.log(typeof 42); // number
console.log(typeof true); // boolean
console.log(typeof {}); // object
console.log(typeof []); // object (arrays are objects)
console.log(typeof null); // object (special case)
console.log(typeof undefined); // undefined
Loops

javascript
Copy
Edit
for (let i = 1; i <= 5; i++) {
    console.log("Loop iteration:", i);
}
Functions

javascript
Copy
Edit
function add(a, b) {
    return a + b;
}
console.log(add(5, 7)); // 12
Arrow Functions

javascript
Copy
Edit
const multiply = (x, y) => x * y;
console.log(multiply(3, 4)); // 12
Real-World Console Analysis
1. Get All Links on a Web Page
javascript
Copy
Edit
let links = [...document.querySelectorAll("a")].map(a => a.href);
console.log(links);
2. Count the Number of Images on a Page
javascript
Copy
Edit
console.log(document.querySelectorAll("img").length);
3. Check All Buttons on a Page
javascript
Copy
Edit
let buttons = document.querySelectorAll("button");
buttons.forEach(btn => console.log(btn.innerText));
4. Measure Page Load Time
javascript
Copy
Edit
console.log("Page Load Time:", window.performance.now(), "ms");
5. Extract All Text Content from a Page
javascript
Copy
Edit
console.log(document.body.innerText);
6. Monitor Events (Click Tracking)
javascript
Copy
Edit
document.addEventListener("click", (event) => {
    console.log("Clicked element:", event.target);
});
7. Detect User Scroll Position
javascript
Copy
Edit
window.addEventListener("scroll", () => {
    console.log("Scroll Position:", window.scrollY);
});
8. Simulate a Click on an Element
javascript
Copy
Edit
document.querySelector("button")?.click();
9. Clear Cookies in Console
javascript
Copy
Edit
document.cookie.split(";").forEach(cookie => {
    document.cookie = cookie.split("=")[0] + "=;expires=" + new Date(0).toUTCString();
});
console.log("Cookies cleared!");
10. Check Local Storage Data
javascript
Copy
Edit
console.log(localStorage);
11. Simulate API Calls (Fake Data Fetching)
javascript
Copy
Edit
fetch("https://jsonplaceholder.typicode.com/posts/1")
    .then(response => response.json())
    .then(data => console.log(data));
Debugging & Performance Monitoring
12. Measure Execution Time of Code
javascript
Copy
Edit
console.time("loopTest");
for (let i = 0; i < 100000; i++) {} // Simulated work
console.timeEnd("loopTest");
13. Check Memory Usage
javascript
Copy
Edit
console.log(performance.memory);
14. Log Messages with Styling
javascript
Copy
Edit
console.log("%cHello, Styled Console!", "color: blue; font-size: 16px; font-weight: bold;");
Advanced Topics
15. Extract JSON from a Web Page
javascript
Copy
Edit
let data = document.querySelector("script[type='application/ld+json']");
console.log(JSON.parse(data?.innerText || "{}"));
16. Create an Interactive Prompt
javascript
Copy
Edit
let name = prompt("Enter your name:");
console.log("Hello, " + name);
17. Generate Random Password
javascript
Copy
Edit
const generatePassword = (length = 12) => {
    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
    return [...Array(length)].map(() => chars[Math.floor(Math.random() * chars.length)]).join('');
};
console.log(generatePassword());



1. Functions in JavaScript
Regular Function
javascript
Copy
Edit
function greet(name) {
    return "Hello, " + name + "!";
}
console.log(greet("Alice"));
Function with Default Parameter
javascript
Copy
Edit
function multiply(a, b = 2) {
    return a * b;
}
console.log(multiply(5));  // Uses default value of 2
console.log(multiply(5, 4)); // Uses provided value of 4
Function Expression
javascript
Copy
Edit
const add = function(a, b) {
    return a + b;
};
console.log(add(3, 4));
2. Arrow Functions
Basic Arrow Function
javascript
Copy
Edit
const square = (num) => num * num;
console.log(square(5));
Arrow Function with Multiple Parameters
javascript
Copy
Edit
const divide = (a, b) => a / b;
console.log(divide(10, 2));
Arrow Function with No Parameters
javascript
Copy
Edit
const sayHello = () => "Hello, World!";
console.log(sayHello());
Arrow Function in setTimeout
javascript
Copy
Edit
setTimeout(() => {
    console.log("This runs after 2 seconds");
}, 2000);
3. Arrays in JavaScript
Basic Array
javascript
Copy
Edit
const fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits);
Array Methods
javascript
Copy
Edit
console.log(fruits.length);  // Get length
fruits.push("Mango");  // Add at end
console.log(fruits);
fruits.pop();  // Remove last element
console.log(fruits);
fruits.unshift("Grapes");  // Add at beginning
console.log(fruits);
fruits.shift();  // Remove first element
console.log(fruits);
Looping Through an Array
javascript
Copy
Edit
fruits.forEach((fruit, index) => {
    console.log(index, fruit);
});
Mapping Over an Array
javascript
Copy
Edit
const numbers = [1, 2, 3, 4, 5];
const squares = numbers.map(num => num * num);
console.log(squares);
Filtering an Array
javascript
Copy
Edit
const evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers);
Finding an Element in an Array
javascript
Copy
Edit
const result = numbers.find(num => num > 2);
console.log(result);  // Returns first number greater than 2
4. Objects in JavaScript
Basic Object
javascript
Copy
Edit
const person = {
    name: "John",
    age: 30,
    job: "Engineer",
};
console.log(person);
console.log(person.name);
console.log(person["job"]);
Looping Over Object Keys
javascript
Copy
Edit
for (let key in person) {
    console.log(key, person[key]);
}
Adding and Removing Properties
javascript
Copy
Edit
person.city = "New York";
console.log(person);
delete person.age;
console.log(person);
5. Promises & Async/Await
Creating a Promise
javascript
Copy
Edit
const myPromise = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve("Data fetched successfully!");
    }, 2000);
});

myPromise.then(response => console.log(response));
Using Async/Await
javascript
Copy
Edit
async function fetchData() {
    return "Data received!";
}

fetchData().then(response => console.log(response));
Async/Await with setTimeout
javascript
Copy
Edit
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

async function asyncExample() {
    console.log("Start");
    await delay(2000);
    console.log("After 2 seconds");
}

asyncExample();
6. Working with JSON
Convert Object to JSON
javascript
Copy
Edit
const user = { name: "Alice", age: 25 };
const jsonString = JSON.stringify(user);
console.log(jsonString);
Convert JSON to Object
javascript
Copy
Edit
const parsedData = JSON.parse(jsonString);
console.log(parsedData);
7. Higher-Order Functions
Using .reduce() to Sum an Array
javascript
Copy
Edit
const nums = [10, 20, 30];
const sum = nums.reduce((acc, num) => acc + num, 0);
console.log(sum);
Sorting an Array
javascript
Copy
Edit
const numbersList = [5, 2, 8, 1, 4];
console.log(numbersList.sort((a, b) => a - b)); // Ascending order
8. Working with Dates
javascript
Copy
Edit
const now = new Date();
console.log(now.toString());
console.log(now.getFullYear());
console.log(now.getMonth() + 1); // Months start at 0
console.log(now.getDate());
console.log(now.getHours());
9. Interacting with Browser Elements
Change Page Title
javascript
Copy
Edit
document.title = "New Title";
Change Background Color
javascript
Copy
Edit
document.body.style.backgroundColor = "lightblue";
Find All Links on a Page
javascript
Copy
Edit
const allLinks = document.querySelectorAll("a");
console.log(allLinks);
10. Handling Events
Click Event
javascript
Copy
Edit
document.body.addEventListener("click", () => {
    console.log("Body clicked!");
});
Keypress Event
javascript
Copy
Edit
document.addEventListener("keydown", (event) => {
    console.log("Key Pressed:", event.key);
});



1. JavaScript Fundamentals to Explore in the Console
These commands will help you understand basic JavaScript concepts like variables, data types, functions, objects, arrays, and more. You can type them directly into the console and see the results immediately.
Variables and Data Types
let x = 10; console.log(x);
Learn about declaring variables with let and logging their values.
const y = "Hello, World!"; console.log(y);
Explore constants and strings.
var z = true; console.log(z);
Understand the older var keyword and booleans.
console.log(typeof x);
Discover how to check the data type of a variable (e.g., number, string, boolean, object, etc.).
Functions
function greet(name) { return Hello, ${name}!; }; console.log(greet("User"));
Learn about functions, parameters, and template literals.
const add = (a, b) => a + b; console.log(add(5, 6));
Explore arrow functions and basic arithmetic.
Objects and Arrays
const person = { name: "Alice", age: 30 }; console.log(person);
Understand objects and their properties.
const numbers = [1, 2, 3, 4, 5]; console.log(numbers);
Learn about arrays and how to log them.
console.log(numbers.length);
Find out how to access array properties like length.
console.log(person.name);
Practice accessing object properties.
Conditionals and Loops
if (x > 5) { console.log("x is greater than 5"); } else { console.log("x is 5 or less"); }
Explore conditional statements (if/else).
for (let i = 0; i < 3; i++) { console.log(i); }
Learn about for loops.
Error Handling
try { undefinedVariable; } catch (error) { console.log("An error occurred:", error); }
Understand try/catch blocks for handling errors.
2. Useful Real-World Console Commands for Web Analysis
The browser console is also a powerful tool for inspecting and interacting with web pages. These commands leverage the Document Object Model (DOM) and browser APIs to analyze and manipulate the current webpage.
Inspecting the DOM and Page Structure
document.title
Display the title of the current webpage.
document.body
Log the <body> element of the page to understand its structure.
document.querySelector("h1")
Select and log the first <h1> element on the page (or any CSS selector, like .class-name or #id).
document.querySelectorAll("p")
Get a list of all <p> (paragraph) elements on the page and log them.
Analyzing Page Elements
const elements = document.getElementsByTagName("a"); console.log(elements.length);
Count the number of links (<a> tags) on the page.
console.log(window.location.href);
Display the current URL of the webpage.
console.log(document.referrer);
Show the URL of the page that referred the user to the current page (if any).
Manipulating the Page
document.body.style.backgroundColor = "lightblue";
Change the background color of the page (you can revert this by setting it back to "" or another color).
const button = document.querySelector("button"); if (button) button.click();
Simulate clicking a button on the page (useful for testing interactive elements).
Performance and Timing
console.time("test"); for (let i = 0; i < 1000000; i++) {}; console.timeEnd("test");
Measure the time taken to execute a loop (useful for performance testing).
setTimeout(() => console.log("This runs after 2 seconds"), 2000);
Explore timing functions like setTimeout for delayed execution.
Network and Debugging
console.log("Debug message");
Log simple messages for debugging.
console.error("This is an error message");
Simulate and understand error logging.
console.table([ { name: "Alice", age: 30 }, { name: "Bob", age: 25 } ]);
Display data in a table format (great for structured data like arrays of objects).
Event Listening
document.addEventListener("click", () => console.log("Page clicked!"));
Add a listener to detect clicks on the page and log them (you can remove it with removeEventListener if needed).
3. Tips for Using the Console Effectively
Experiment Safely: Most of these commands won’t harm the page or your browser, but avoid running unfamiliar code from untrusted sources.
Clear the Console: Use console.clear() to reset the console output.
Autocomplete: In the Edge console, press Tab or use arrow keys to autocomplete commands or explore properties of objects.
Check for Errors: If you see undefined, it might mean the command executed but returned no value, or there’s an issue (like trying to access a non-existent element).
Use the "Learn More" Links: The console in the image mentions "Learn Copilot in Edge" – you can explore Edge’s built-in tools for more advanced debugging and learning.


##########indexdb#############################

// Open (or create) the database
let request = indexedDB.open("MyDatabase", 1);

// Handle database creation or upgrade
request.onupgradeneeded = function(event) {
  let db = event.target.result;
  // Create an object store (like a table) called "users" with an auto-incrementing key
  let objectStore = db.createObjectStore("users", { keyPath: "id", autoIncrement: true });
  // Create an index for faster searching by name
  objectStore.createIndex("name", "name", { unique: false });
  console.log("Database and object store created!");
};

// Handle success
request.onsuccess = function(event) {
  let db = event.target.result;
  console.log("Database opened successfully!");
  db.close(); // Close the database after testing
};

// Handle errors
request.onerror = function(event) {
  console.error("Error opening database:", event.target.error);
};


############examlple 2######################

  Open or Create the Database:

javascript
let request = indexedDB.open("MyDatabase", 1);

request.onupgradeneeded = function(event) {
    let db = event.target.result;

    // Create an object store called "users" with "id" as the keyPath
    let objectStore = db.createObjectStore("users", { keyPath: "id" });

    // Create indexes on the object store
    objectStore.createIndex("name", "name", { unique: false });
    objectStore.createIndex("email", "email", { unique: true });
};

request.onsuccess = function(event) {
    console.log("Database opened successfully");
};

request.onerror = function(event) {
    console.error("Database error: " + event.target.errorCode);
};
Add Data to the Object Store:

javascript
request.onsuccess = function(event) {
    let db = event.target.result;

    let transaction = db.transaction("users", "readwrite");
    let objectStore = transaction.objectStore("users");

    let user1 = { id: 1, name: "Alice", email: "alice@example.com" };
    let user2 = { id: 2, name: "Bob", email: "bob@example.com" };

    objectStore.add(user1);
    objectStore.add(user2);

    transaction.oncomplete = function() {
        console.log("All transactions completed");
    };

    transaction.onerror = function(event) {
        console.error("Transaction error: " + event.target.errorCode);
    };
};
Retrieve Data from the Object Store:

javascript
request.onsuccess = function(event) {
    let db = event.target.result;

    let transaction = db.transaction("users", "readonly");
    let objectStore = transaction.objectStore("users");

    let getRequest = objectStore.get(1); // Retrieve user with id 1

    getRequest.onsuccess = function(event) {
        console.log("User retrieved:", event.target.result);
    };

    getRequest.onerror = function(event) {
        console.error("Get request error: " + event.target.errorCode);
    };
};
This example demonstrates how to open or create an IndexedDB database, create an object store, add data to the store, and retrieve data from the store. You can run these commands in the JavaScript Console in Edge to see them in action. Enjoy exploring IndexedDB!










